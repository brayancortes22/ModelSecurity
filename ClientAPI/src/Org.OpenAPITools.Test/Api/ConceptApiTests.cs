/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ConceptApi
    /// </summary>
    public sealed class ConceptApiTests : ApiTestsBase
    {
        private readonly IConceptApi _instance;

        public ConceptApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IConceptApi>();
        }

        /// <summary>
        /// Test ApiConceptGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiConceptGetAsyncTest()
        {
            var response = await _instance.ApiConceptGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ConceptDto>>(model);
        }

        /// <summary>
        /// Test ApiConceptIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiConceptIdDeleteAsyncTest()
        {
            int id = default!;
            await _instance.ApiConceptIdDeleteAsync(id);
        }

        /// <summary>
        /// Test ApiConceptIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiConceptIdGetAsyncTest()
        {
            int id = default!;
            var response = await _instance.ApiConceptIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<ConceptDto>(model);
        }

        /// <summary>
        /// Test ApiConceptIdPatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiConceptIdPatchAsyncTest()
        {
            int id = default!;
            Client.Option<ConceptDto> conceptDto = default!;
            await _instance.ApiConceptIdPatchAsync(id, conceptDto);
        }

        /// <summary>
        /// Test ApiConceptIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiConceptIdPutAsyncTest()
        {
            int id = default!;
            Client.Option<ConceptDto> conceptDto = default!;
            await _instance.ApiConceptIdPutAsync(id, conceptDto);
        }

        /// <summary>
        /// Test ApiConceptIdSoftDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiConceptIdSoftDeleteAsyncTest()
        {
            int id = default!;
            await _instance.ApiConceptIdSoftDeleteAsync(id);
        }

        /// <summary>
        /// Test ApiConceptPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiConceptPostAsyncTest()
        {
            Client.Option<ConceptDto> conceptDto = default!;
            var response = await _instance.ApiConceptPostAsync(conceptDto);
            var model = response.Created();
            Assert.IsType<ConceptDto>(model);
        }
    }
}
