/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing TypeModalityApi
    /// </summary>
    public sealed class TypeModalityApiTests : ApiTestsBase
    {
        private readonly ITypeModalityApi _instance;

        public TypeModalityApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ITypeModalityApi>();
        }

        /// <summary>
        /// Test ApiTypeModalityGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTypeModalityGetAsyncTest()
        {
            var response = await _instance.ApiTypeModalityGetAsync();
            var model = response.Ok();
            Assert.IsType<List<TypeModalityDto>>(model);
        }

        /// <summary>
        /// Test ApiTypeModalityIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTypeModalityIdDeleteAsyncTest()
        {
            int id = default!;
            await _instance.ApiTypeModalityIdDeleteAsync(id);
        }

        /// <summary>
        /// Test ApiTypeModalityIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTypeModalityIdGetAsyncTest()
        {
            int id = default!;
            var response = await _instance.ApiTypeModalityIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<TypeModalityDto>(model);
        }

        /// <summary>
        /// Test ApiTypeModalityIdPatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTypeModalityIdPatchAsyncTest()
        {
            int id = default!;
            Client.Option<TypeModalityDto> typeModalityDto = default!;
            var response = await _instance.ApiTypeModalityIdPatchAsync(id, typeModalityDto);
            var model = response.Ok();
            Assert.IsType<TypeModalityDto>(model);
        }

        /// <summary>
        /// Test ApiTypeModalityIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTypeModalityIdPutAsyncTest()
        {
            int id = default!;
            Client.Option<TypeModalityDto> typeModalityDto = default!;
            var response = await _instance.ApiTypeModalityIdPutAsync(id, typeModalityDto);
            var model = response.Ok();
            Assert.IsType<TypeModalityDto>(model);
        }

        /// <summary>
        /// Test ApiTypeModalityIdSoftDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTypeModalityIdSoftDeleteAsyncTest()
        {
            int id = default!;
            await _instance.ApiTypeModalityIdSoftDeleteAsync(id);
        }

        /// <summary>
        /// Test ApiTypeModalityPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiTypeModalityPostAsyncTest()
        {
            Client.Option<TypeModalityDto> typeModalityDto = default!;
            var response = await _instance.ApiTypeModalityPostAsync(typeModalityDto);
            var model = response.Created();
            Assert.IsType<TypeModalityDto>(model);
        }
    }
}
