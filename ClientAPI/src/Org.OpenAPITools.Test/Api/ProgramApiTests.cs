/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ProgramApi
    /// </summary>
    public sealed class ProgramApiTests : ApiTestsBase
    {
        private readonly IProgramApi _instance;

        public ProgramApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IProgramApi>();
        }

        /// <summary>
        /// Test ApiProgramGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiProgramGetAsyncTest()
        {
            var response = await _instance.ApiProgramGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ProgramDto>>(model);
        }

        /// <summary>
        /// Test ApiProgramIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiProgramIdDeleteAsyncTest()
        {
            int id = default!;
            await _instance.ApiProgramIdDeleteAsync(id);
        }

        /// <summary>
        /// Test ApiProgramIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiProgramIdGetAsyncTest()
        {
            int id = default!;
            var response = await _instance.ApiProgramIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<ProgramDto>(model);
        }

        /// <summary>
        /// Test ApiProgramIdPatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiProgramIdPatchAsyncTest()
        {
            int id = default!;
            Client.Option<ProgramDto> programDto = default!;
            var response = await _instance.ApiProgramIdPatchAsync(id, programDto);
            var model = response.Ok();
            Assert.IsType<ProgramDto>(model);
        }

        /// <summary>
        /// Test ApiProgramIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiProgramIdPutAsyncTest()
        {
            int id = default!;
            Client.Option<ProgramDto> programDto = default!;
            var response = await _instance.ApiProgramIdPutAsync(id, programDto);
            var model = response.Ok();
            Assert.IsType<ProgramDto>(model);
        }

        /// <summary>
        /// Test ApiProgramIdSoftDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiProgramIdSoftDeleteAsyncTest()
        {
            int id = default!;
            await _instance.ApiProgramIdSoftDeleteAsync(id);
        }

        /// <summary>
        /// Test ApiProgramPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiProgramPostAsyncTest()
        {
            Client.Option<ProgramDto> programDto = default!;
            var response = await _instance.ApiProgramPostAsync(programDto);
            var model = response.Created();
            Assert.IsType<ProgramDto>(model);
        }
    }
}
