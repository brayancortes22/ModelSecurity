/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing SedeApi
    /// </summary>
    public sealed class SedeApiTests : ApiTestsBase
    {
        private readonly ISedeApi _instance;

        public SedeApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISedeApi>();
        }

        /// <summary>
        /// Test ApiSedeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiSedeGetAsyncTest()
        {
            var response = await _instance.ApiSedeGetAsync();
            var model = response.Ok();
            Assert.IsType<List<SedeDto>>(model);
        }

        /// <summary>
        /// Test ApiSedeIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiSedeIdDeleteAsyncTest()
        {
            int id = default!;
            await _instance.ApiSedeIdDeleteAsync(id);
        }

        /// <summary>
        /// Test ApiSedeIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiSedeIdGetAsyncTest()
        {
            int id = default!;
            var response = await _instance.ApiSedeIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<SedeDto>(model);
        }

        /// <summary>
        /// Test ApiSedeIdPatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiSedeIdPatchAsyncTest()
        {
            int id = default!;
            Client.Option<SedeDto> sedeDto = default!;
            var response = await _instance.ApiSedeIdPatchAsync(id, sedeDto);
            var model = response.Ok();
            Assert.IsType<SedeDto>(model);
        }

        /// <summary>
        /// Test ApiSedeIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiSedeIdPutAsyncTest()
        {
            int id = default!;
            Client.Option<SedeDto> sedeDto = default!;
            var response = await _instance.ApiSedeIdPutAsync(id, sedeDto);
            var model = response.Ok();
            Assert.IsType<SedeDto>(model);
        }

        /// <summary>
        /// Test ApiSedeIdSoftDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiSedeIdSoftDeleteAsyncTest()
        {
            int id = default!;
            await _instance.ApiSedeIdSoftDeleteAsync(id);
        }

        /// <summary>
        /// Test ApiSedePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiSedePostAsyncTest()
        {
            Client.Option<SedeDto> sedeDto = default!;
            var response = await _instance.ApiSedePostAsync(sedeDto);
            var model = response.Created();
            Assert.IsType<SedeDto>(model);
        }
    }
}
