// <auto-generated>
/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EnterpriseDto
    /// </summary>
    public partial class EnterpriseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnterpriseDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="observation">observation</param>
        /// <param name="nameEnterprise">nameEnterprise</param>
        /// <param name="phoneEnterprise">phoneEnterprise</param>
        /// <param name="locate">locate</param>
        /// <param name="nitEnterprise">nitEnterprise</param>
        /// <param name="emailEnterprise">emailEnterprise</param>
        /// <param name="active">active</param>
        [JsonConstructor]
        public EnterpriseDto(Option<int?> id = default, Option<string?> observation = default, Option<string?> nameEnterprise = default, Option<string?> phoneEnterprise = default, Option<string?> locate = default, Option<string?> nitEnterprise = default, Option<string?> emailEnterprise = default, Option<bool?> active = default)
        {
            IdOption = id;
            ObservationOption = observation;
            NameEnterpriseOption = nameEnterprise;
            PhoneEnterpriseOption = phoneEnterprise;
            LocateOption = locate;
            NitEnterpriseOption = nitEnterprise;
            EmailEnterpriseOption = emailEnterprise;
            ActiveOption = active;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Observation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObservationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Observation
        /// </summary>
        [JsonPropertyName("observation")]
        public string? Observation { get { return this.ObservationOption; } set { this.ObservationOption = new(value); } }

        /// <summary>
        /// Used to track the state of NameEnterprise
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameEnterpriseOption { get; private set; }

        /// <summary>
        /// Gets or Sets NameEnterprise
        /// </summary>
        [JsonPropertyName("nameEnterprise")]
        public string? NameEnterprise { get { return this.NameEnterpriseOption; } set { this.NameEnterpriseOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhoneEnterprise
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneEnterpriseOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhoneEnterprise
        /// </summary>
        [JsonPropertyName("phoneEnterprise")]
        public string? PhoneEnterprise { get { return this.PhoneEnterpriseOption; } set { this.PhoneEnterpriseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Locate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Locate
        /// </summary>
        [JsonPropertyName("locate")]
        public string? Locate { get { return this.LocateOption; } set { this.LocateOption = new(value); } }

        /// <summary>
        /// Used to track the state of NitEnterprise
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NitEnterpriseOption { get; private set; }

        /// <summary>
        /// Gets or Sets NitEnterprise
        /// </summary>
        [JsonPropertyName("nitEnterprise")]
        public string? NitEnterprise { get { return this.NitEnterpriseOption; } set { this.NitEnterpriseOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailEnterprise
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailEnterpriseOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailEnterprise
        /// </summary>
        [JsonPropertyName("emailEnterprise")]
        public string? EmailEnterprise { get { return this.EmailEnterpriseOption; } set { this.EmailEnterpriseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnterpriseDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Observation: ").Append(Observation).Append("\n");
            sb.Append("  NameEnterprise: ").Append(NameEnterprise).Append("\n");
            sb.Append("  PhoneEnterprise: ").Append(PhoneEnterprise).Append("\n");
            sb.Append("  Locate: ").Append(Locate).Append("\n");
            sb.Append("  NitEnterprise: ").Append(NitEnterprise).Append("\n");
            sb.Append("  EmailEnterprise: ").Append(EmailEnterprise).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EnterpriseDto" />
    /// </summary>
    public class EnterpriseDtoJsonConverter : JsonConverter<EnterpriseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="EnterpriseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EnterpriseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> observation = default;
            Option<string?> nameEnterprise = default;
            Option<string?> phoneEnterprise = default;
            Option<string?> locate = default;
            Option<string?> nitEnterprise = default;
            Option<string?> emailEnterprise = default;
            Option<bool?> active = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "observation":
                            observation = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "nameEnterprise":
                            nameEnterprise = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "phoneEnterprise":
                            phoneEnterprise = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "locate":
                            locate = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "nitEnterprise":
                            nitEnterprise = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "emailEnterprise":
                            emailEnterprise = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                active = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EnterpriseDto.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class EnterpriseDto.");

            return new EnterpriseDto(id, observation, nameEnterprise, phoneEnterprise, locate, nitEnterprise, emailEnterprise, active);
        }

        /// <summary>
        /// Serializes a <see cref="EnterpriseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="enterpriseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EnterpriseDto enterpriseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, enterpriseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EnterpriseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="enterpriseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EnterpriseDto enterpriseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (enterpriseDto.IdOption.IsSet)
                writer.WriteNumber("id", enterpriseDto.IdOption.Value!.Value);

            if (enterpriseDto.ObservationOption.IsSet)
                if (enterpriseDto.ObservationOption.Value != null)
                    writer.WriteString("observation", enterpriseDto.Observation);
                else
                    writer.WriteNull("observation");

            if (enterpriseDto.NameEnterpriseOption.IsSet)
                if (enterpriseDto.NameEnterpriseOption.Value != null)
                    writer.WriteString("nameEnterprise", enterpriseDto.NameEnterprise);
                else
                    writer.WriteNull("nameEnterprise");

            if (enterpriseDto.PhoneEnterpriseOption.IsSet)
                if (enterpriseDto.PhoneEnterpriseOption.Value != null)
                    writer.WriteString("phoneEnterprise", enterpriseDto.PhoneEnterprise);
                else
                    writer.WriteNull("phoneEnterprise");

            if (enterpriseDto.LocateOption.IsSet)
                if (enterpriseDto.LocateOption.Value != null)
                    writer.WriteString("locate", enterpriseDto.Locate);
                else
                    writer.WriteNull("locate");

            if (enterpriseDto.NitEnterpriseOption.IsSet)
                if (enterpriseDto.NitEnterpriseOption.Value != null)
                    writer.WriteString("nitEnterprise", enterpriseDto.NitEnterprise);
                else
                    writer.WriteNull("nitEnterprise");

            if (enterpriseDto.EmailEnterpriseOption.IsSet)
                if (enterpriseDto.EmailEnterpriseOption.Value != null)
                    writer.WriteString("emailEnterprise", enterpriseDto.EmailEnterprise);
                else
                    writer.WriteNull("emailEnterprise");

            if (enterpriseDto.ActiveOption.IsSet)
                writer.WriteBoolean("active", enterpriseDto.ActiveOption.Value!.Value);
        }
    }
}
