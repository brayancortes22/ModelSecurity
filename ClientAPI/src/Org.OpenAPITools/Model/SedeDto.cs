// <auto-generated>
/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SedeDto
    /// </summary>
    public partial class SedeDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SedeDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="codeSede">codeSede</param>
        /// <param name="address">address</param>
        /// <param name="phoneSede">phoneSede</param>
        /// <param name="emailContact">emailContact</param>
        /// <param name="centerId">centerId</param>
        /// <param name="active">active</param>
        [JsonConstructor]
        public SedeDto(Option<int?> id = default, Option<string?> name = default, Option<string?> codeSede = default, Option<string?> address = default, Option<string?> phoneSede = default, Option<string?> emailContact = default, Option<int?> centerId = default, Option<bool?> active = default)
        {
            IdOption = id;
            NameOption = name;
            CodeSedeOption = codeSede;
            AddressOption = address;
            PhoneSedeOption = phoneSede;
            EmailContactOption = emailContact;
            CenterIdOption = centerId;
            ActiveOption = active;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodeSede
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeSedeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodeSede
        /// </summary>
        [JsonPropertyName("codeSede")]
        public string? CodeSede { get { return this.CodeSedeOption; } set { this.CodeSedeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string? Address { get { return this.AddressOption; } set { this.AddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhoneSede
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneSedeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhoneSede
        /// </summary>
        [JsonPropertyName("phoneSede")]
        public string? PhoneSede { get { return this.PhoneSedeOption; } set { this.PhoneSedeOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailContact
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailContactOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailContact
        /// </summary>
        [JsonPropertyName("emailContact")]
        public string? EmailContact { get { return this.EmailContactOption; } set { this.EmailContactOption = new(value); } }

        /// <summary>
        /// Used to track the state of CenterId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CenterIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CenterId
        /// </summary>
        [JsonPropertyName("centerId")]
        public int? CenterId { get { return this.CenterIdOption; } set { this.CenterIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SedeDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CodeSede: ").Append(CodeSede).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PhoneSede: ").Append(PhoneSede).Append("\n");
            sb.Append("  EmailContact: ").Append(EmailContact).Append("\n");
            sb.Append("  CenterId: ").Append(CenterId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SedeDto" />
    /// </summary>
    public class SedeDtoJsonConverter : JsonConverter<SedeDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SedeDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SedeDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> name = default;
            Option<string?> codeSede = default;
            Option<string?> address = default;
            Option<string?> phoneSede = default;
            Option<string?> emailContact = default;
            Option<int?> centerId = default;
            Option<bool?> active = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "codeSede":
                            codeSede = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "phoneSede":
                            phoneSede = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "emailContact":
                            emailContact = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "centerId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                centerId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                active = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SedeDto.");

            if (centerId.IsSet && centerId.Value == null)
                throw new ArgumentNullException(nameof(centerId), "Property is not nullable for class SedeDto.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class SedeDto.");

            return new SedeDto(id, name, codeSede, address, phoneSede, emailContact, centerId, active);
        }

        /// <summary>
        /// Serializes a <see cref="SedeDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sedeDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SedeDto sedeDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sedeDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SedeDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sedeDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SedeDto sedeDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sedeDto.IdOption.IsSet)
                writer.WriteNumber("id", sedeDto.IdOption.Value!.Value);

            if (sedeDto.NameOption.IsSet)
                if (sedeDto.NameOption.Value != null)
                    writer.WriteString("name", sedeDto.Name);
                else
                    writer.WriteNull("name");

            if (sedeDto.CodeSedeOption.IsSet)
                if (sedeDto.CodeSedeOption.Value != null)
                    writer.WriteString("codeSede", sedeDto.CodeSede);
                else
                    writer.WriteNull("codeSede");

            if (sedeDto.AddressOption.IsSet)
                if (sedeDto.AddressOption.Value != null)
                    writer.WriteString("address", sedeDto.Address);
                else
                    writer.WriteNull("address");

            if (sedeDto.PhoneSedeOption.IsSet)
                if (sedeDto.PhoneSedeOption.Value != null)
                    writer.WriteString("phoneSede", sedeDto.PhoneSede);
                else
                    writer.WriteNull("phoneSede");

            if (sedeDto.EmailContactOption.IsSet)
                if (sedeDto.EmailContactOption.Value != null)
                    writer.WriteString("emailContact", sedeDto.EmailContact);
                else
                    writer.WriteNull("emailContact");

            if (sedeDto.CenterIdOption.IsSet)
                writer.WriteNumber("centerId", sedeDto.CenterIdOption.Value!.Value);

            if (sedeDto.ActiveOption.IsSet)
                writer.WriteBoolean("active", sedeDto.ActiveOption.Value!.Value);
        }
    }
}
