// <auto-generated>
/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PersonDto
    /// </summary>
    public partial class PersonDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="active">active</param>
        /// <param name="name">name</param>
        /// <param name="firstName">firstName</param>
        /// <param name="secondName">secondName</param>
        /// <param name="firstLastName">firstLastName</param>
        /// <param name="secondLastName">secondLastName</param>
        /// <param name="phoneNumber">phoneNumber</param>
        /// <param name="email">email</param>
        /// <param name="typeIdentification">typeIdentification</param>
        /// <param name="numberIdentification">numberIdentification</param>
        /// <param name="signig">signig</param>
        [JsonConstructor]
        public PersonDto(Option<int?> id = default, Option<bool?> active = default, Option<string?> name = default, Option<string?> firstName = default, Option<string?> secondName = default, Option<string?> firstLastName = default, Option<string?> secondLastName = default, Option<string?> phoneNumber = default, Option<string?> email = default, Option<string?> typeIdentification = default, Option<int?> numberIdentification = default, Option<bool?> signig = default)
        {
            IdOption = id;
            ActiveOption = active;
            NameOption = name;
            FirstNameOption = firstName;
            SecondNameOption = secondName;
            FirstLastNameOption = firstLastName;
            SecondLastNameOption = secondLastName;
            PhoneNumberOption = phoneNumber;
            EmailOption = email;
            TypeIdentificationOption = typeIdentification;
            NumberIdentificationOption = numberIdentification;
            SignigOption = signig;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("firstName")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SecondName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SecondNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets SecondName
        /// </summary>
        [JsonPropertyName("secondName")]
        public string? SecondName { get { return this.SecondNameOption; } set { this.SecondNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstLastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstLastNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstLastName
        /// </summary>
        [JsonPropertyName("firstLastName")]
        public string? FirstLastName { get { return this.FirstLastNameOption; } set { this.FirstLastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SecondLastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SecondLastNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets SecondLastName
        /// </summary>
        [JsonPropertyName("secondLastName")]
        public string? SecondLastName { get { return this.SecondLastNameOption; } set { this.SecondLastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of TypeIdentification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeIdentificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets TypeIdentification
        /// </summary>
        [JsonPropertyName("typeIdentification")]
        public string? TypeIdentification { get { return this.TypeIdentificationOption; } set { this.TypeIdentificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberIdentification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberIdentificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumberIdentification
        /// </summary>
        [JsonPropertyName("numberIdentification")]
        public int? NumberIdentification { get { return this.NumberIdentificationOption; } set { this.NumberIdentificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Signig
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SignigOption { get; private set; }

        /// <summary>
        /// Gets or Sets Signig
        /// </summary>
        [JsonPropertyName("signig")]
        public bool? Signig { get { return this.SignigOption; } set { this.SignigOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  SecondName: ").Append(SecondName).Append("\n");
            sb.Append("  FirstLastName: ").Append(FirstLastName).Append("\n");
            sb.Append("  SecondLastName: ").Append(SecondLastName).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  TypeIdentification: ").Append(TypeIdentification).Append("\n");
            sb.Append("  NumberIdentification: ").Append(NumberIdentification).Append("\n");
            sb.Append("  Signig: ").Append(Signig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PersonDto" />
    /// </summary>
    public class PersonDtoJsonConverter : JsonConverter<PersonDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="PersonDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PersonDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<bool?> active = default;
            Option<string?> name = default;
            Option<string?> firstName = default;
            Option<string?> secondName = default;
            Option<string?> firstLastName = default;
            Option<string?> secondLastName = default;
            Option<string?> phoneNumber = default;
            Option<string?> email = default;
            Option<string?> typeIdentification = default;
            Option<int?> numberIdentification = default;
            Option<bool?> signig = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                active = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "secondName":
                            secondName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "firstLastName":
                            firstLastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "secondLastName":
                            secondLastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "phoneNumber":
                            phoneNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "typeIdentification":
                            typeIdentification = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "numberIdentification":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numberIdentification = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "signig":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                signig = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PersonDto.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class PersonDto.");

            if (numberIdentification.IsSet && numberIdentification.Value == null)
                throw new ArgumentNullException(nameof(numberIdentification), "Property is not nullable for class PersonDto.");

            if (signig.IsSet && signig.Value == null)
                throw new ArgumentNullException(nameof(signig), "Property is not nullable for class PersonDto.");

            return new PersonDto(id, active, name, firstName, secondName, firstLastName, secondLastName, phoneNumber, email, typeIdentification, numberIdentification, signig);
        }

        /// <summary>
        /// Serializes a <see cref="PersonDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="personDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PersonDto personDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, personDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PersonDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="personDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PersonDto personDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (personDto.IdOption.IsSet)
                writer.WriteNumber("id", personDto.IdOption.Value!.Value);

            if (personDto.ActiveOption.IsSet)
                writer.WriteBoolean("active", personDto.ActiveOption.Value!.Value);

            if (personDto.NameOption.IsSet)
                if (personDto.NameOption.Value != null)
                    writer.WriteString("name", personDto.Name);
                else
                    writer.WriteNull("name");

            if (personDto.FirstNameOption.IsSet)
                if (personDto.FirstNameOption.Value != null)
                    writer.WriteString("firstName", personDto.FirstName);
                else
                    writer.WriteNull("firstName");

            if (personDto.SecondNameOption.IsSet)
                if (personDto.SecondNameOption.Value != null)
                    writer.WriteString("secondName", personDto.SecondName);
                else
                    writer.WriteNull("secondName");

            if (personDto.FirstLastNameOption.IsSet)
                if (personDto.FirstLastNameOption.Value != null)
                    writer.WriteString("firstLastName", personDto.FirstLastName);
                else
                    writer.WriteNull("firstLastName");

            if (personDto.SecondLastNameOption.IsSet)
                if (personDto.SecondLastNameOption.Value != null)
                    writer.WriteString("secondLastName", personDto.SecondLastName);
                else
                    writer.WriteNull("secondLastName");

            if (personDto.PhoneNumberOption.IsSet)
                if (personDto.PhoneNumberOption.Value != null)
                    writer.WriteString("phoneNumber", personDto.PhoneNumber);
                else
                    writer.WriteNull("phoneNumber");

            if (personDto.EmailOption.IsSet)
                if (personDto.EmailOption.Value != null)
                    writer.WriteString("email", personDto.Email);
                else
                    writer.WriteNull("email");

            if (personDto.TypeIdentificationOption.IsSet)
                if (personDto.TypeIdentificationOption.Value != null)
                    writer.WriteString("typeIdentification", personDto.TypeIdentification);
                else
                    writer.WriteNull("typeIdentification");

            if (personDto.NumberIdentificationOption.IsSet)
                writer.WriteNumber("numberIdentification", personDto.NumberIdentificationOption.Value!.Value);

            if (personDto.SignigOption.IsSet)
                writer.WriteBoolean("signig", personDto.SignigOption.Value!.Value);
        }
    }
}
