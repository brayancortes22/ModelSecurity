// <auto-generated>
/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserSedeDto
    /// </summary>
    public partial class UserSedeDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSedeDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="statusProcedure">statusProcedure</param>
        /// <param name="userId">userId</param>
        /// <param name="sedeId">sedeId</param>
        [JsonConstructor]
        public UserSedeDto(Option<int?> id = default, Option<string?> statusProcedure = default, Option<int?> userId = default, Option<int?> sedeId = default)
        {
            IdOption = id;
            StatusProcedureOption = statusProcedure;
            UserIdOption = userId;
            SedeIdOption = sedeId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusProcedure
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusProcedureOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatusProcedure
        /// </summary>
        [JsonPropertyName("statusProcedure")]
        public string? StatusProcedure { get { return this.StatusProcedureOption; } set { this.StatusProcedureOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public int? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SedeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SedeIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SedeId
        /// </summary>
        [JsonPropertyName("sedeId")]
        public int? SedeId { get { return this.SedeIdOption; } set { this.SedeIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserSedeDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StatusProcedure: ").Append(StatusProcedure).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  SedeId: ").Append(SedeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserSedeDto" />
    /// </summary>
    public class UserSedeDtoJsonConverter : JsonConverter<UserSedeDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserSedeDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserSedeDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> statusProcedure = default;
            Option<int?> userId = default;
            Option<int?> sedeId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "statusProcedure":
                            statusProcedure = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "userId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "sedeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sedeId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserSedeDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class UserSedeDto.");

            if (sedeId.IsSet && sedeId.Value == null)
                throw new ArgumentNullException(nameof(sedeId), "Property is not nullable for class UserSedeDto.");

            return new UserSedeDto(id, statusProcedure, userId, sedeId);
        }

        /// <summary>
        /// Serializes a <see cref="UserSedeDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userSedeDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserSedeDto userSedeDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userSedeDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserSedeDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userSedeDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserSedeDto userSedeDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userSedeDto.IdOption.IsSet)
                writer.WriteNumber("id", userSedeDto.IdOption.Value!.Value);

            if (userSedeDto.StatusProcedureOption.IsSet)
                if (userSedeDto.StatusProcedureOption.Value != null)
                    writer.WriteString("statusProcedure", userSedeDto.StatusProcedure);
                else
                    writer.WriteNull("statusProcedure");

            if (userSedeDto.UserIdOption.IsSet)
                writer.WriteNumber("userId", userSedeDto.UserIdOption.Value!.Value);

            if (userSedeDto.SedeIdOption.IsSet)
                writer.WriteNumber("sedeId", userSedeDto.SedeIdOption.Value!.Value);
        }
    }
}
