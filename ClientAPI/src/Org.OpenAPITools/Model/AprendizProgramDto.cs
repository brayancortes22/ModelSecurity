// <auto-generated>
/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AprendizProgramDto
    /// </summary>
    public partial class AprendizProgramDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AprendizProgramDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="programId">programId</param>
        /// <param name="aprendizId">aprendizId</param>
        /// <param name="active">active</param>
        [JsonConstructor]
        public AprendizProgramDto(Option<int?> id = default, Option<int?> programId = default, Option<int?> aprendizId = default, Option<bool?> active = default)
        {
            IdOption = id;
            ProgramIdOption = programId;
            AprendizIdOption = aprendizId;
            ActiveOption = active;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgramId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProgramIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProgramId
        /// </summary>
        [JsonPropertyName("programId")]
        public int? ProgramId { get { return this.ProgramIdOption; } set { this.ProgramIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AprendizId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AprendizIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AprendizId
        /// </summary>
        [JsonPropertyName("aprendizId")]
        public int? AprendizId { get { return this.AprendizIdOption; } set { this.AprendizIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AprendizProgramDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  AprendizId: ").Append(AprendizId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AprendizProgramDto" />
    /// </summary>
    public class AprendizProgramDtoJsonConverter : JsonConverter<AprendizProgramDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="AprendizProgramDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AprendizProgramDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<int?> programId = default;
            Option<int?> aprendizId = default;
            Option<bool?> active = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "programId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                programId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "aprendizId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                aprendizId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                active = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AprendizProgramDto.");

            if (programId.IsSet && programId.Value == null)
                throw new ArgumentNullException(nameof(programId), "Property is not nullable for class AprendizProgramDto.");

            if (aprendizId.IsSet && aprendizId.Value == null)
                throw new ArgumentNullException(nameof(aprendizId), "Property is not nullable for class AprendizProgramDto.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class AprendizProgramDto.");

            return new AprendizProgramDto(id, programId, aprendizId, active);
        }

        /// <summary>
        /// Serializes a <see cref="AprendizProgramDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aprendizProgramDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AprendizProgramDto aprendizProgramDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, aprendizProgramDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AprendizProgramDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aprendizProgramDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AprendizProgramDto aprendizProgramDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (aprendizProgramDto.IdOption.IsSet)
                writer.WriteNumber("id", aprendizProgramDto.IdOption.Value!.Value);

            if (aprendizProgramDto.ProgramIdOption.IsSet)
                writer.WriteNumber("programId", aprendizProgramDto.ProgramIdOption.Value!.Value);

            if (aprendizProgramDto.AprendizIdOption.IsSet)
                writer.WriteNumber("aprendizId", aprendizProgramDto.AprendizIdOption.Value!.Value);

            if (aprendizProgramDto.ActiveOption.IsSet)
                writer.WriteBoolean("active", aprendizProgramDto.ActiveOption.Value!.Value);
        }
    }
}
