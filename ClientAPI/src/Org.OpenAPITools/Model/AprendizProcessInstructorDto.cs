// <auto-generated>
/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AprendizProcessInstructorDto
    /// </summary>
    public partial class AprendizProcessInstructorDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AprendizProcessInstructorDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="aprendizId">aprendizId</param>
        /// <param name="instructorId">instructorId</param>
        /// <param name="registerySofiaId">registerySofiaId</param>
        /// <param name="conceptId">conceptId</param>
        /// <param name="enterpriseId">enterpriseId</param>
        /// <param name="processId">processId</param>
        /// <param name="typeModalityId">typeModalityId</param>
        /// <param name="stateId">stateId</param>
        /// <param name="verificationId">verificationId</param>
        [JsonConstructor]
        public AprendizProcessInstructorDto(Option<int?> id = default, Option<int?> aprendizId = default, Option<int?> instructorId = default, Option<int?> registerySofiaId = default, Option<int?> conceptId = default, Option<int?> enterpriseId = default, Option<int?> processId = default, Option<int?> typeModalityId = default, Option<int?> stateId = default, Option<int?> verificationId = default)
        {
            IdOption = id;
            AprendizIdOption = aprendizId;
            InstructorIdOption = instructorId;
            RegisterySofiaIdOption = registerySofiaId;
            ConceptIdOption = conceptId;
            EnterpriseIdOption = enterpriseId;
            ProcessIdOption = processId;
            TypeModalityIdOption = typeModalityId;
            StateIdOption = stateId;
            VerificationIdOption = verificationId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AprendizId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AprendizIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AprendizId
        /// </summary>
        [JsonPropertyName("aprendizId")]
        public int? AprendizId { get { return this.AprendizIdOption; } set { this.AprendizIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of InstructorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InstructorIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InstructorId
        /// </summary>
        [JsonPropertyName("instructorId")]
        public int? InstructorId { get { return this.InstructorIdOption; } set { this.InstructorIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RegisterySofiaId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RegisterySofiaIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegisterySofiaId
        /// </summary>
        [JsonPropertyName("registerySofiaId")]
        public int? RegisterySofiaId { get { return this.RegisterySofiaIdOption; } set { this.RegisterySofiaIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConceptId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ConceptIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConceptId
        /// </summary>
        [JsonPropertyName("conceptId")]
        public int? ConceptId { get { return this.ConceptIdOption; } set { this.ConceptIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnterpriseId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EnterpriseIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EnterpriseId
        /// </summary>
        [JsonPropertyName("enterpriseId")]
        public int? EnterpriseId { get { return this.EnterpriseIdOption; } set { this.EnterpriseIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProcessId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProcessIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [JsonPropertyName("processId")]
        public int? ProcessId { get { return this.ProcessIdOption; } set { this.ProcessIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of TypeModalityId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TypeModalityIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TypeModalityId
        /// </summary>
        [JsonPropertyName("typeModalityId")]
        public int? TypeModalityId { get { return this.TypeModalityIdOption; } set { this.TypeModalityIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StateIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [JsonPropertyName("stateId")]
        public int? StateId { get { return this.StateIdOption; } set { this.StateIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of VerificationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VerificationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets VerificationId
        /// </summary>
        [JsonPropertyName("verificationId")]
        public int? VerificationId { get { return this.VerificationIdOption; } set { this.VerificationIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AprendizProcessInstructorDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AprendizId: ").Append(AprendizId).Append("\n");
            sb.Append("  InstructorId: ").Append(InstructorId).Append("\n");
            sb.Append("  RegisterySofiaId: ").Append(RegisterySofiaId).Append("\n");
            sb.Append("  ConceptId: ").Append(ConceptId).Append("\n");
            sb.Append("  EnterpriseId: ").Append(EnterpriseId).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  TypeModalityId: ").Append(TypeModalityId).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  VerificationId: ").Append(VerificationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AprendizProcessInstructorDto" />
    /// </summary>
    public class AprendizProcessInstructorDtoJsonConverter : JsonConverter<AprendizProcessInstructorDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="AprendizProcessInstructorDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AprendizProcessInstructorDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<int?> aprendizId = default;
            Option<int?> instructorId = default;
            Option<int?> registerySofiaId = default;
            Option<int?> conceptId = default;
            Option<int?> enterpriseId = default;
            Option<int?> processId = default;
            Option<int?> typeModalityId = default;
            Option<int?> stateId = default;
            Option<int?> verificationId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "aprendizId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                aprendizId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "instructorId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                instructorId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "registerySofiaId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                registerySofiaId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "conceptId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                conceptId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "enterpriseId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enterpriseId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "processId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                processId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "typeModalityId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                typeModalityId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "stateId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stateId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "verificationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                verificationId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AprendizProcessInstructorDto.");

            if (aprendizId.IsSet && aprendizId.Value == null)
                throw new ArgumentNullException(nameof(aprendizId), "Property is not nullable for class AprendizProcessInstructorDto.");

            if (instructorId.IsSet && instructorId.Value == null)
                throw new ArgumentNullException(nameof(instructorId), "Property is not nullable for class AprendizProcessInstructorDto.");

            if (registerySofiaId.IsSet && registerySofiaId.Value == null)
                throw new ArgumentNullException(nameof(registerySofiaId), "Property is not nullable for class AprendizProcessInstructorDto.");

            if (conceptId.IsSet && conceptId.Value == null)
                throw new ArgumentNullException(nameof(conceptId), "Property is not nullable for class AprendizProcessInstructorDto.");

            if (enterpriseId.IsSet && enterpriseId.Value == null)
                throw new ArgumentNullException(nameof(enterpriseId), "Property is not nullable for class AprendizProcessInstructorDto.");

            if (processId.IsSet && processId.Value == null)
                throw new ArgumentNullException(nameof(processId), "Property is not nullable for class AprendizProcessInstructorDto.");

            if (typeModalityId.IsSet && typeModalityId.Value == null)
                throw new ArgumentNullException(nameof(typeModalityId), "Property is not nullable for class AprendizProcessInstructorDto.");

            if (stateId.IsSet && stateId.Value == null)
                throw new ArgumentNullException(nameof(stateId), "Property is not nullable for class AprendizProcessInstructorDto.");

            if (verificationId.IsSet && verificationId.Value == null)
                throw new ArgumentNullException(nameof(verificationId), "Property is not nullable for class AprendizProcessInstructorDto.");

            return new AprendizProcessInstructorDto(id, aprendizId, instructorId, registerySofiaId, conceptId, enterpriseId, processId, typeModalityId, stateId, verificationId);
        }

        /// <summary>
        /// Serializes a <see cref="AprendizProcessInstructorDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aprendizProcessInstructorDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AprendizProcessInstructorDto aprendizProcessInstructorDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, aprendizProcessInstructorDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AprendizProcessInstructorDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aprendizProcessInstructorDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AprendizProcessInstructorDto aprendizProcessInstructorDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (aprendizProcessInstructorDto.IdOption.IsSet)
                writer.WriteNumber("id", aprendizProcessInstructorDto.IdOption.Value!.Value);

            if (aprendizProcessInstructorDto.AprendizIdOption.IsSet)
                writer.WriteNumber("aprendizId", aprendizProcessInstructorDto.AprendizIdOption.Value!.Value);

            if (aprendizProcessInstructorDto.InstructorIdOption.IsSet)
                writer.WriteNumber("instructorId", aprendizProcessInstructorDto.InstructorIdOption.Value!.Value);

            if (aprendizProcessInstructorDto.RegisterySofiaIdOption.IsSet)
                writer.WriteNumber("registerySofiaId", aprendizProcessInstructorDto.RegisterySofiaIdOption.Value!.Value);

            if (aprendizProcessInstructorDto.ConceptIdOption.IsSet)
                writer.WriteNumber("conceptId", aprendizProcessInstructorDto.ConceptIdOption.Value!.Value);

            if (aprendizProcessInstructorDto.EnterpriseIdOption.IsSet)
                writer.WriteNumber("enterpriseId", aprendizProcessInstructorDto.EnterpriseIdOption.Value!.Value);

            if (aprendizProcessInstructorDto.ProcessIdOption.IsSet)
                writer.WriteNumber("processId", aprendizProcessInstructorDto.ProcessIdOption.Value!.Value);

            if (aprendizProcessInstructorDto.TypeModalityIdOption.IsSet)
                writer.WriteNumber("typeModalityId", aprendizProcessInstructorDto.TypeModalityIdOption.Value!.Value);

            if (aprendizProcessInstructorDto.StateIdOption.IsSet)
                writer.WriteNumber("stateId", aprendizProcessInstructorDto.StateIdOption.Value!.Value);

            if (aprendizProcessInstructorDto.VerificationIdOption.IsSet)
                writer.WriteNumber("verificationId", aprendizProcessInstructorDto.VerificationIdOption.Value!.Value);
        }
    }
}
