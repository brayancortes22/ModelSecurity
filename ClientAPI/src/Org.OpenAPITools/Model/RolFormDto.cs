// <auto-generated>
/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RolFormDto
    /// </summary>
    public partial class RolFormDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RolFormDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="permission">permission</param>
        /// <param name="rolId">rolId</param>
        /// <param name="formId">formId</param>
        [JsonConstructor]
        public RolFormDto(Option<int?> id = default, Option<string?> permission = default, Option<int?> rolId = default, Option<int?> formId = default)
        {
            IdOption = id;
            PermissionOption = permission;
            RolIdOption = rolId;
            FormIdOption = formId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Permission
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PermissionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Permission
        /// </summary>
        [JsonPropertyName("permission")]
        public string? Permission { get { return this.PermissionOption; } set { this.PermissionOption = new(value); } }

        /// <summary>
        /// Used to track the state of RolId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RolIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets RolId
        /// </summary>
        [JsonPropertyName("rolId")]
        public int? RolId { get { return this.RolIdOption; } set { this.RolIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FormIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets FormId
        /// </summary>
        [JsonPropertyName("formId")]
        public int? FormId { get { return this.FormIdOption; } set { this.FormIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RolFormDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("  RolId: ").Append(RolId).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RolFormDto" />
    /// </summary>
    public class RolFormDtoJsonConverter : JsonConverter<RolFormDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="RolFormDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RolFormDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> permission = default;
            Option<int?> rolId = default;
            Option<int?> formId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "permission":
                            permission = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "rolId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rolId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "formId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                formId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class RolFormDto.");

            if (rolId.IsSet && rolId.Value == null)
                throw new ArgumentNullException(nameof(rolId), "Property is not nullable for class RolFormDto.");

            if (formId.IsSet && formId.Value == null)
                throw new ArgumentNullException(nameof(formId), "Property is not nullable for class RolFormDto.");

            return new RolFormDto(id, permission, rolId, formId);
        }

        /// <summary>
        /// Serializes a <see cref="RolFormDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rolFormDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RolFormDto rolFormDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rolFormDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RolFormDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rolFormDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RolFormDto rolFormDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rolFormDto.IdOption.IsSet)
                writer.WriteNumber("id", rolFormDto.IdOption.Value!.Value);

            if (rolFormDto.PermissionOption.IsSet)
                if (rolFormDto.PermissionOption.Value != null)
                    writer.WriteString("permission", rolFormDto.Permission);
                else
                    writer.WriteNull("permission");

            if (rolFormDto.RolIdOption.IsSet)
                writer.WriteNumber("rolId", rolFormDto.RolIdOption.Value!.Value);

            if (rolFormDto.FormIdOption.IsSet)
                writer.WriteNumber("formId", rolFormDto.FormIdOption.Value!.Value);
        }
    }
}
