// <auto-generated>
/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FormDto
    /// </summary>
    public partial class FormDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="description">description</param>
        /// <param name="cuestion">cuestion</param>
        /// <param name="typeCuestion">typeCuestion</param>
        /// <param name="answer">answer</param>
        /// <param name="active">active</param>
        [JsonConstructor]
        public FormDto(Option<int?> id = default, Option<string?> name = default, Option<string?> description = default, Option<string?> cuestion = default, Option<string?> typeCuestion = default, Option<string?> answer = default, Option<bool?> active = default)
        {
            IdOption = id;
            NameOption = name;
            DescriptionOption = description;
            CuestionOption = cuestion;
            TypeCuestionOption = typeCuestion;
            AnswerOption = answer;
            ActiveOption = active;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cuestion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CuestionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cuestion
        /// </summary>
        [JsonPropertyName("cuestion")]
        public string? Cuestion { get { return this.CuestionOption; } set { this.CuestionOption = new(value); } }

        /// <summary>
        /// Used to track the state of TypeCuestion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeCuestionOption { get; private set; }

        /// <summary>
        /// Gets or Sets TypeCuestion
        /// </summary>
        [JsonPropertyName("typeCuestion")]
        public string? TypeCuestion { get { return this.TypeCuestionOption; } set { this.TypeCuestionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Answer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AnswerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Answer
        /// </summary>
        [JsonPropertyName("answer")]
        public string? Answer { get { return this.AnswerOption; } set { this.AnswerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FormDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Cuestion: ").Append(Cuestion).Append("\n");
            sb.Append("  TypeCuestion: ").Append(TypeCuestion).Append("\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FormDto" />
    /// </summary>
    public class FormDtoJsonConverter : JsonConverter<FormDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="FormDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FormDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> name = default;
            Option<string?> description = default;
            Option<string?> cuestion = default;
            Option<string?> typeCuestion = default;
            Option<string?> answer = default;
            Option<bool?> active = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cuestion":
                            cuestion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "typeCuestion":
                            typeCuestion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "answer":
                            answer = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                active = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FormDto.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class FormDto.");

            return new FormDto(id, name, description, cuestion, typeCuestion, answer, active);
        }

        /// <summary>
        /// Serializes a <see cref="FormDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="formDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FormDto formDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, formDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FormDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="formDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FormDto formDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (formDto.IdOption.IsSet)
                writer.WriteNumber("id", formDto.IdOption.Value!.Value);

            if (formDto.NameOption.IsSet)
                if (formDto.NameOption.Value != null)
                    writer.WriteString("name", formDto.Name);
                else
                    writer.WriteNull("name");

            if (formDto.DescriptionOption.IsSet)
                if (formDto.DescriptionOption.Value != null)
                    writer.WriteString("description", formDto.Description);
                else
                    writer.WriteNull("description");

            if (formDto.CuestionOption.IsSet)
                if (formDto.CuestionOption.Value != null)
                    writer.WriteString("cuestion", formDto.Cuestion);
                else
                    writer.WriteNull("cuestion");

            if (formDto.TypeCuestionOption.IsSet)
                if (formDto.TypeCuestionOption.Value != null)
                    writer.WriteString("typeCuestion", formDto.TypeCuestion);
                else
                    writer.WriteNull("typeCuestion");

            if (formDto.AnswerOption.IsSet)
                if (formDto.AnswerOption.Value != null)
                    writer.WriteString("answer", formDto.Answer);
                else
                    writer.WriteNull("answer");

            if (formDto.ActiveOption.IsSet)
                writer.WriteBoolean("active", formDto.ActiveOption.Value!.Value);
        }
    }
}
