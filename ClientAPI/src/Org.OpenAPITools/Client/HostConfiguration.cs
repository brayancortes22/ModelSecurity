/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Client
{
    /// <summary>
    /// Provides hosting configuration for Org.OpenAPITools
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new AprendizDtoJsonConverter());
            _jsonOptions.Converters.Add(new AprendizProcessInstructorDtoJsonConverter());
            _jsonOptions.Converters.Add(new AprendizProgramDtoJsonConverter());
            _jsonOptions.Converters.Add(new CenterDtoJsonConverter());
            _jsonOptions.Converters.Add(new ConceptDtoJsonConverter());
            _jsonOptions.Converters.Add(new EnterpriseDtoJsonConverter());
            _jsonOptions.Converters.Add(new FormDtoJsonConverter());
            _jsonOptions.Converters.Add(new FormModuleDtoJsonConverter());
            _jsonOptions.Converters.Add(new InstructorDtoJsonConverter());
            _jsonOptions.Converters.Add(new InstructorProgramDtoJsonConverter());
            _jsonOptions.Converters.Add(new ModuleDtoJsonConverter());
            _jsonOptions.Converters.Add(new PersonDtoJsonConverter());
            _jsonOptions.Converters.Add(new ProblemDetailsJsonConverter());
            _jsonOptions.Converters.Add(new ProcessDtoJsonConverter());
            _jsonOptions.Converters.Add(new ProgramDtoJsonConverter());
            _jsonOptions.Converters.Add(new RegionalDtoJsonConverter());
            _jsonOptions.Converters.Add(new RegisterySofiaDtoJsonConverter());
            _jsonOptions.Converters.Add(new RolDtoJsonConverter());
            _jsonOptions.Converters.Add(new RolFormDtoJsonConverter());
            _jsonOptions.Converters.Add(new SedeDtoJsonConverter());
            _jsonOptions.Converters.Add(new StateDtoJsonConverter());
            _jsonOptions.Converters.Add(new TypeModalityDtoJsonConverter());
            _jsonOptions.Converters.Add(new UserDtoJsonConverter());
            _jsonOptions.Converters.Add(new UserRolDtoJsonConverter());
            _jsonOptions.Converters.Add(new UserSedeDtoJsonConverter());
            _jsonOptions.Converters.Add(new VerificationDtoJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<AprendizApiEvents>();
            _services.AddTransient<IAprendizApi, AprendizApi>();
            _services.AddSingleton<AprendizProcessInstructorApiEvents>();
            _services.AddTransient<IAprendizProcessInstructorApi, AprendizProcessInstructorApi>();
            _services.AddSingleton<AprendizProgramApiEvents>();
            _services.AddTransient<IAprendizProgramApi, AprendizProgramApi>();
            _services.AddSingleton<CenterApiEvents>();
            _services.AddTransient<ICenterApi, CenterApi>();
            _services.AddSingleton<ConceptApiEvents>();
            _services.AddTransient<IConceptApi, ConceptApi>();
            _services.AddSingleton<EnterpriseApiEvents>();
            _services.AddTransient<IEnterpriseApi, EnterpriseApi>();
            _services.AddSingleton<FormApiEvents>();
            _services.AddTransient<IFormApi, FormApi>();
            _services.AddSingleton<FormModuleApiEvents>();
            _services.AddTransient<IFormModuleApi, FormModuleApi>();
            _services.AddSingleton<InstructorApiEvents>();
            _services.AddTransient<IInstructorApi, InstructorApi>();
            _services.AddSingleton<InstructorProgramApiEvents>();
            _services.AddTransient<IInstructorProgramApi, InstructorProgramApi>();
            _services.AddSingleton<ModuleApiEvents>();
            _services.AddTransient<IModuleApi, ModuleApi>();
            _services.AddSingleton<PersonApiEvents>();
            _services.AddTransient<IPersonApi, PersonApi>();
            _services.AddSingleton<ProcessApiEvents>();
            _services.AddTransient<IProcessApi, ProcessApi>();
            _services.AddSingleton<ProgramApiEvents>();
            _services.AddTransient<IProgramApi, ProgramApi>();
            _services.AddSingleton<RegionalApiEvents>();
            _services.AddTransient<IRegionalApi, RegionalApi>();
            _services.AddSingleton<RegisterySofiaApiEvents>();
            _services.AddTransient<IRegisterySofiaApi, RegisterySofiaApi>();
            _services.AddSingleton<RolApiEvents>();
            _services.AddTransient<IRolApi, RolApi>();
            _services.AddSingleton<RolFormApiEvents>();
            _services.AddTransient<IRolFormApi, RolFormApi>();
            _services.AddSingleton<RolUserApiEvents>();
            _services.AddTransient<IRolUserApi, RolUserApi>();
            _services.AddSingleton<SedeApiEvents>();
            _services.AddTransient<ISedeApi, SedeApi>();
            _services.AddSingleton<StateApiEvents>();
            _services.AddTransient<IStateApi, StateApi>();
            _services.AddSingleton<TypeModalityApiEvents>();
            _services.AddTransient<ITypeModalityApi, TypeModalityApi>();
            _services.AddSingleton<UserApiEvents>();
            _services.AddTransient<IUserApi, UserApi>();
            _services.AddSingleton<UserRolApiEvents>();
            _services.AddTransient<IUserRolApi, UserRolApi>();
            _services.AddSingleton<UserSedeApiEvents>();
            _services.AddTransient<IUserSedeApi, UserSedeApi>();
            _services.AddSingleton<VerificationApiEvents>();
            _services.AddTransient<IVerificationApi, VerificationApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IAprendizApi, AprendizApi>(client));
            builders.Add(_services.AddHttpClient<IAprendizProcessInstructorApi, AprendizProcessInstructorApi>(client));
            builders.Add(_services.AddHttpClient<IAprendizProgramApi, AprendizProgramApi>(client));
            builders.Add(_services.AddHttpClient<ICenterApi, CenterApi>(client));
            builders.Add(_services.AddHttpClient<IConceptApi, ConceptApi>(client));
            builders.Add(_services.AddHttpClient<IEnterpriseApi, EnterpriseApi>(client));
            builders.Add(_services.AddHttpClient<IFormApi, FormApi>(client));
            builders.Add(_services.AddHttpClient<IFormModuleApi, FormModuleApi>(client));
            builders.Add(_services.AddHttpClient<IInstructorApi, InstructorApi>(client));
            builders.Add(_services.AddHttpClient<IInstructorProgramApi, InstructorProgramApi>(client));
            builders.Add(_services.AddHttpClient<IModuleApi, ModuleApi>(client));
            builders.Add(_services.AddHttpClient<IPersonApi, PersonApi>(client));
            builders.Add(_services.AddHttpClient<IProcessApi, ProcessApi>(client));
            builders.Add(_services.AddHttpClient<IProgramApi, ProgramApi>(client));
            builders.Add(_services.AddHttpClient<IRegionalApi, RegionalApi>(client));
            builders.Add(_services.AddHttpClient<IRegisterySofiaApi, RegisterySofiaApi>(client));
            builders.Add(_services.AddHttpClient<IRolApi, RolApi>(client));
            builders.Add(_services.AddHttpClient<IRolFormApi, RolFormApi>(client));
            builders.Add(_services.AddHttpClient<IRolUserApi, RolUserApi>(client));
            builders.Add(_services.AddHttpClient<ISedeApi, SedeApi>(client));
            builders.Add(_services.AddHttpClient<IStateApi, StateApi>(client));
            builders.Add(_services.AddHttpClient<ITypeModalityApi, TypeModalityApi>(client));
            builders.Add(_services.AddHttpClient<IUserApi, UserApi>(client));
            builders.Add(_services.AddHttpClient<IUserRolApi, UserRolApi>(client));
            builders.Add(_services.AddHttpClient<IUserSedeApi, UserSedeApi>(client));
            builders.Add(_services.AddHttpClient<IVerificationApi, VerificationApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
